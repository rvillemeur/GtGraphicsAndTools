{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-05T15:19:41.260861-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-05T15:19:41.260861-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "jPf6zh+pDQCSq4jnAprxhg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "# Vector graphics\n\n## introduction\n\nThere are two different computer graphics: vector and raster graphics.\nRaster graphics represents images as a collection of pixels. Vector graphics\nis the use of geometric primitives such as points, lines, curves, or polygons\nto represent images. These primitives are created using mathematical equations.\n\nBoth types of computer graphics have advantages and disadvantages.\nThe advantages of vector graphics over raster are:\n\n* smaller size\n* ability to zoom indefinitely\n* moving, scaling, filling, and rotating does not degrade the quality of an image\n\nUltimately, picture on a computer are displayed on a screen with a specific\ndisplay dimension. However, while raster graphic doesn't scale very well when\nthe resolution differ too much from the picture resolutiom, vector graphics\nare rasterized to fit the display they will appear on. Rasterization is the\ntechnique of taking an image described in a vector graphics format and\ntransform it into a set of pixels for output on a screen.\n\nNote: You have the same concept when doing 3D programming with an API like\nopenGL. You describe your scene with point, vertices, etc..., and in the end,\nyou rasterize your scene to display it on your screen.\n\n## Base class\n\n*AthensSurface* and its subclass *AthensCairoSurface* \n-> initialize a new surface\n\n*AthensCanvas* is the central object used to perform drawing on an *AthensSurface*\nCanvas is not directly instanciated but used through a call like\n*surface drawDuring: [:canvas | .... ]*\n\nThe rendering dispatch is `rendering dispatch  Canvas->receiver->paint`\n\nThe Athens drawing model relies on a three layer model. Any drawing process \ntakes place in three steps:\n\n1. First a \"\"path\"\" is created, which includes one or more vector primitives , i.e., circles, lines, TrueType fonts, Bézier curves, etc...\n2. Then painting must be defined, which may be a color, a color gradient, a bitmap or some vector graphics\n3. Finally the result is drawn to the Athens surface, which is provided by the back-end for the output.\n\n## Athens vocabulary\n\nThe reason you are using Athens in a program is to draw. \nThe *source* and *mask* are freely placed somewhere over the *destination* surface. \nThe layers are all pressed together and the paint from the source is \ntransferred to the destination wherever the mask allows it. To that extent there \nare five drawing verbs, or operations: *Stroke*, *fill*, *drawString*, *paint*\nand *mask*. They are all similar, they differ by how they construct the mask.\n\n### Destination\n\nThe destination is the *surface* on which you're drawing. This surface collects \nthe elements of your graphic as you apply them, allowing you to build up a \ncomplex work as though painting on a canvas.\n![Athens destination](/media/destination.png)\n\n### Source\n\nThe source is the \"paint\" you're about to work with. I show this as it is—plain \nblack for several examples—but translucent to show lower layers. Unlike real \npaint, it doesn't have to be a single color; it can be a pattern or even a \npreviously created destination surface (see How do I paint from one surface to \nanother?). Also unlike real paint it can contain transparency information—the \nAlpha channel.\n![Athens source](/media/source.png)\n\n### Mask\n\nThe mask is the most important piece: it controls where you apply the source to \nthe destination. I will show it as a yellow layer with holes where it lets the \nsource through. When you apply a drawing verb, it's like you stamp the source \nto the destination. Anywhere the mask allows, the source is copied. Anywhere \nthe mask disallows, nothing happens.\n![Athens mask](/media/source.png)\n\n### Path\n\nThe path is somewhere between part of the mask and part of the context. \nI will show it as thin green lines on the mask layer. It is manipulated by path \nverbs, then used by drawing verbs.\n\n### stroke\n\n### draw class\n\nAthensShape and AthensPath\n\n## Path\nAthens always has an active path. \n\nUse AthensPathBuilder or AthensSimplePathBuilder to build a path\nThey will assemble segment for you\n\ncreatePath: This message exist in all important Athens class:\n* AthensCanvas\n* AthensSurface\n* AthensPathBuilder\n\n*createPath: aPathCreatingBlock*\n\nUsing it return a new path:\n```smalltalk\nsurface createPath: [:builder |\n        builder\n            absolute;\n            moveTo: 100@100;\n            lineTo: 100@300;\n            lineTo: 300@300;\n            lineTo: 300@100;\n            close ].\n```\n\nhelper message in *AthensSimplePathBuilder*\n- pathStart\n- pathBounds -> give the limit of the bounds associated to the path\n\nIf you want to build path using only straight line, you can use the class\n*AthensPolygon*\n\n\n|path builder Messages  |Object Segment     |comment                     |\n|-----------------------|-------------------|----------------------------|\n|ccwArcTo: angle:       |AthensCCWArcSegment|counter clock wise segment  |\n|cwArcTo:angle:         |AthensCWArcSegment |clock wise segment          |\n|lineTo:                |AthensLineSegment  |straight line               |\n|moveTo:                |AthensMoveSegment  |start a new contour         |\n|curveVia: to:          |AthensQuadSegment  |quadric bezier curve        |\n|curveVia: and: to:     |AthensCubicSegment |Cubic bezier curve          |\n|reflectedCurveVia: to: |AthensCubicSegment |Reflected cubic bezier curve|\n|string: font:          |                   |specific to cairo           |\n|close                  |AthensCloseSegment |close the current contour   |\n\n\nCoordinate class: *Absolute* or *Relative*\nabsolute: absolute coordinate from surface coordinate.\n```smalltalk\n    builder absolute;\n            moveTo: 100@100;\n            lineTo: 100@300;\n            lineTo: 300@300;\n            lineTo: 300@100;\n            close\n```\n-> will draw a square in a surface which extent is 400@400 using absolute move.\n\nrelative: each new move is relative to the previous one.\n```smalltalk\n        builder relative ;\n            moveTo: 100@100;\n            lineTo: 200@0;\n            lineTo: 0@200;\n            lineTo: -200@0;\n            close\n```\n-> will draw a square in a surface which extent is 400@400 using relative move.\n\ncwArcTo:angle: and ccwArcTo: angle: will draw circular arc, connecting  \nprevious segment endpoint and current endpoint of given angle, passing in \nclockwise or counter clockwise direction. The angle must be specified in Radian.\n\nPlease remember that the circumference of a circle is equal to 2 * Pi * R.\nIf R = 1, half of the circumference is equal to PI, which is the value of half\na circle.\n\n## painting\n\n\n### Paints\nPaints can be created either from the surface or directly from a class that will\ndo the call to the surface for you.\n\nany object can be treated as paint:\n - athensFillPath: aPath on: aCanvas\n - athensFillRectangle: aRectangle on: aCanvas\n - asStrokePaint\n\n|surface message                                  |helper class        |  comment               |\n|createFormPaint:                                 |                    |create paint from a Form|\n|createLinearGradient: start: stop:               |LinearGradientPaint |linear gradient paint   |\n|createRadialGradient: center: radius:            |RadialGradientPaint |Radial gradient paint   |\n|createRadialGradient: center: radius: focalPoint:|RadialGradientPaint |Radial gradient paint   |\n|createShadowPaint:                               |AthensShadowPaint   |???                     |\n|createSolidColorPaint:                           |                    |fill paint              |\n|createStrokePaintFor:                            |AthensStrokePaint   |stroke paint            |\n\na Canvas define its paint method:\n* setPaint:\n* setStrokePaint:\n\n### Stroke paint\nThe *createStrokePaintFor* operation takes a virtual pen along the path. It allows the source \nto transfer through the mask in a thin (or thick) line around the path\n\nAthensStrokePaint return a stroke paint.\n\nImport Athens message:\n    width: -> specify the width of the stroke.\n    joinBevel\n    joinMiter\n    joinRound\n    capButt\n    capRound\n    capSquare\n\n\n### Solid paint\nThe*createSolidColorPaint* operation instead uses the path like the lines of a coloring book, \nand allows the source through the mask within the hole whose boundaries are the \npath. For complex paths (paths with multiple closed sub-paths—like a donut—or\npaths that self-intersect) this is influenced by the fill rule\n\n\n### Gradient\nGradient will let you create gradient of color, either linear, or radial.\n\nThe color ramp is a collection of associations with keys - floating point values \nbetween 0 and 1 and values with Colors, for example:\n{0 -> Color blue . 0.5 -> Color white. 1 -> Color red}.\n\nYou can use either helper class or calling surface messages:\n```smalltalk\nsurface createLinearGradient: {0 -> Color blue .0.5 -> Color white. 1 -> Color red} start:  0@0  stop: 200@100.\n```\nor\n```smalltalk\n(LinearGradientPaint from: 0 @ 0 to: self extent) colorRamp: {0 -> Color white. 1 -> Color black}).\n```\n\nStart and stop point are reference to the current shape being drawn.\nExemple:\nCreate a vertical gradient\n```smalltalk\ncanvas\n    setPaint:\n        (canvas surface\n            createLinearGradient:\n                {(0 -> Color blue).\n                (0.5 -> Color white).\n                (1 -> Color red)}\n            start: 0@200\n            stop: 0@400). \n    canvas drawShape: (0@200 extent: 300@400).\n```\n\ncreate a horizontal gradient:\n```smalltalk\ncanvas\n    setPaint:\n        (canvas surface\n            createLinearGradient:\n                {(0 -> Color blue).\n                (0.5 -> Color white).\n                (1 -> Color red)}\n            start: 0@200\n            stop: 300@200). \n    canvas drawShape: (0@200 extent: 300@400).\n```\n\ncreate a diagonal gradient:\n```smalltalk\ncanvas\n    setPaint:\n        (canvas surface\n            createLinearGradient:\n                {(0 -> Color blue).\n                (0.5 -> Color white).\n                (1 -> Color red)}\n            start: 0@200\n            stop: 300@400). \n    canvas drawShape: (0@200 extent: 300@400).\n```\n\n### drawing\nEither you set the shape first and then you call *draw*, or you call the \nconvenient method*drawShape:* directly with the path to draw as argument\n\n# example:\n```smalltalk\n\"canvas pathTransform loadIdentity.  font1 getPreciseAscent. font getPreciseHeight\"\n            surface clear.\n            canvas\n                setPaint:\n                    ((LinearGradientPaint from: 0 @ 0 to: self extent)\n                        colorRamp:\n                            {(0 -> Color white).\n                            (1 -> Color black)}).\n            canvas drawShape: (0 @ 0 extent: self extent).\n            canvas\n                setPaint:\n                    (canvas surface\n                        createLinearGradient:\n                            {(0 -> Color blue).\n                            (0.5 -> Color white).\n                            (1 -> Color red)}\n                        start: 0@200\n                        stop: 0@400). \"change to 200 to get an horizontal gradient\"\n            canvas drawShape: (0@200 extent: 300@400).\n            canvas setFont: font.\n            canvas\n                setPaint:\n                    (canvas surface\n                        createLinearGradient:\n                            {(0 -> Color blue).\n                            (0.5 -> Color white).\n                            (1 -> Color red)}\n                        start: 50@0\n                        stop: (37*5)@0). \"number of caracter * 5\"\n            canvas pathTransform\n                translateX: 45 Y: 45 + font getPreciseAscent;\n                scaleBy: 2;\n                rotateByDegrees: 28.\n            canvas\n                drawString: 'Hello Athens in Pharo/Morphic !!!!!!!'.\n```\n\n```smalltalk\nrenderAthens\n    surface\n        drawDuring: [ :canvas | \n            | stroke squarePath circlePath |\n            squarePath := canvas\n                createPath: [ :builder | \n                    builder\n                        absolute;\n                        moveTo: 100 @ 100;\n                        lineTo: 100 @ 300;\n                        lineTo: 300 @ 300;\n                        lineTo: 300 @ 100;\n                        close ].\n            circlePath := canvas\n                createPath: [ :builder | \n                    builder\n                        absolute;\n                        moveTo: 200 @ 100;\n                        cwArcTo: 200 @ 300 angle: 180 degreesToRadians;\n                        cwArcTo: 200 @ 100 angle: Float pi ].\n            canvas setPaint: Color red.\n            canvas drawShape: squarePath.\n            stroke := canvas setStrokePaint: Color black.\n            stroke\n                width: 10;\n                joinRound;\n                capRound.\n            canvas drawShape: squarePath.\n            canvas drawShape: circlePath.\n            circlePath := canvas\n                createPath: [ :builder | \n                    builder\n                        relative;\n                        moveTo: 175 @ 175;\n                        cwArcTo: 50 @ 50 angle: 180 degreesToRadians;\n                        cwArcTo: -50 @ -50 angle: Float pi ].\n            canvas drawShape: circlePath ]\n```\n\n# Playing\nTo help you practice your Athens drawing, you can use Athens sketch, migrated from SmalltalkHub:\nhttp://smalltalkhub.com/#!/~NicolaiHess/github\nhttps://github.com/rvillemeur/AthensSketch\n\n"
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2022-11-05T15:19:38.781869-04:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2022-11-05T15:19:53.243434-04:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "drawing with Vector Canvas"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "8793f9ce-1fa9-0d00-92aa-2465029af186"
	}
}