{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-05T15:20:35.714097-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-05T15:20:35.714097-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "+LlF0h+pDQCSr3tsAprxhg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "note morph\n\n\n\n• Morph is a superclass of graphical objects; it has methods that let those objects respond to events and display themselves.\n• All morphs have bounds (rectangles on the screen), and can have submorphs.\n• The world (the screen or page) is itself a morph. This gives you the basic model for a scene graph displayed on the screen.\n• A hand object, shown as the cursor (and also part of the world), can pick up other objects and drop them elsewhere, thus effecting not only motion but also changes in the structure of the scene graph. The hand is also the source of user event messages such as mouseDown: and mouseMove:.\n• User events such as mouseDown: are passed as messages from the screen, down through the scene graph, to the frontmost morph that contains the location of the event.\n• Morphs typically define methods that respond to user input events like mouseDown:, or to the passage of time through a tick message from the world.\n• When a morph’s position or appearance changes, a changed message causes the Morphic display system to update the screen efficiently, and without flashing.\n• Both normal screen changes and animations are handled by a simple iterative kernel:\n    forever do:\n    detect and dispatch user events, such as mouseDown:, mouseMove:\n    run step methods defined for any morphs,\n    compute the affected screen area, and update it using double buffering\n(source: the evolution of smalltalk.pdf)\n\n# coordinate systems:\nA morph has two coordinate system:\n- from the outsite world\n- from itself, its bounds\nAccesssible in the geometry protocol\nFor example, if you specify a point directly, Morph will position it in the world.\nBounds are recalculated when we move the morph, and coordinate associated with it\nare recalculated accordingly.\n\nMorphic:\nUn Morph est définis par son \"bounds\", soit le rectangle délimitant son espace.\nhttp://wiki.squeak.org/squeak/morphic\nhttps://wiki.squeak.org/squeak/2141\n\n\n\nPour créer un nouveau widget:\n- drawOn: dessine le nouveau widget.\n- containsPoint: pour définir la place effectivement occupé à l'ecran\n\n\nGestion de la souris et des évènement.\n- handleMouseDown: et \n    - mouseDown:; mouseUp:\n\n- handleMouseOver:\n    - mouseEnter: et mouseLeave:\n\n- handleKeyStroke\n\nPour combiner les Morph:\n- addMorph: and all method in protocol 'submorphs-add/remove'\n- position, dans le protocol geometry\nNote that the geometry protocol is used to position element inside a Morph.\nIt can be used as well in the drawOn: message, so it used either for drawing\nor for position Morph when we combine them.\n- layout policy: https://wiki.squeak.org/squeak/2141\n\n\nAnimation:\n- step and StepTime\n\nDrag&Drop:\n\nGet Form generated by Morph: AthensHello new imageForm  \n\nWhen you open a Morph with the message openInWorld, it'll add itself to the \nglobal world Morph: `aWorld addMorph: self.`\n\n\nExemple de construction de fenêtre morphic avec modèle: FontChooserMorph et FontChooser\nExemple de morph affiché dynamiquement: CalendarMorph on: '2020-01-21' asDate\nExemple de morph construit par aggregation de morph: CheckboxMorph  new openInWorld \n- on dérive d'un morph, et on ajoute les nouveaux morph intéressant.\n\n\nself bounds corner - self bounds origin\nbounds is a Rectangle object. As such, you can find its coordinate, \neither relative from Pharo world: bounds origin, bounds corner,\nor by itself, going from 0@0 to bounds extend\n\n\nCanvas utilisé par défaut: FormCanvas\nAthen dessine dans une image, qu'il envoie ensuite dans le canvas.\n\n\nMorph subclass: #AthensDemoMorph\n\ndrawOn: aCanvas\n\nself halt.\n\tself render.\n\n\taCanvas\n\t\tdrawImage: surface asForm at: self bounds origin\n\n\nasForm\n\t\"create a form and copy an image data there\"\n\tself checkSession.\n\tself flush.\n \t^ (AthensCairoSurfaceForm extent: (self width@(self height)) depth: 32 bits: id)\n\t\tsurface: self;\n\t\tyourself\n\n\nMorph a trop de responsabilité:\n- layout de sous-morph (protocol geometry)\n- styling \n- gestion des menus du World\n\n\nHandMorph -> souris.\n\nWorldMorph doOneCycle -> permet de rafraichir le monde.\nVa parcourir les sous-morph qui composent le monde, et va les dessiner, en utilisant le canvas par défaut: FormCanvas\n\nLe canvas va utiliser la classe Form, qui est un espace rectangulaire pour mettre une image.\nLa classe Form utilise ensuite BitBlt pour envoyer son dessin vers l'écran\n\n\n# morphic world\n- managing system cursor:\n[https://github.com/pharo-project/pharo/commit/a9e5d8cbb142334e002875c72fe4b8eb9f78e64d#diff-9de4d9ca26fa0ecc18374ee9e3087f5309eac071b9eb992e3ff03c27a63aa4a6]\n\n- managing display\n[https://github.com/pharo-project/pharo/commit/4e3d8862af9e72110a97bc314ea696677fb1226e#diff-9de4d9ca26fa0ecc18374ee9e3087f5309eac071b9eb992e3ff03c27a63aa4a6] \n\n- updating display resolution\n[https://github.com/pharo-project/pharo/commit/0a6041d7a3331d827a23d465373e591d4fc33e67#] \n\n# drawing \n\nMorphic is currently the way to go on pharo for Graphics. However, all existing canvas\nare pixel based, and not vector based. This can be an issue with current screen,\nwhere the resolution can differ from machine to machine.\n\nEnter Athens, a vector based graphic API. Under the scene, it can either use\nballoon Canvas, or the cairo graphic library for the rasterization phase.\n\nWhen you integrate Athens with Morphic, you'll use the rendering engine to\ncreate your picture. It's then transformed in a Form and displayed using on\nthe screen using BitBlt.\n\n# Athens with Morphic\nWe'll see how to use Athens directly integrated with Morphic. So will be the \nbase class we'll use after for all our experiment:\n\nFirst, we define a class, which inherit from Morph:\n```smalltalk\nMorph subclass: #AthensHello\n    instanceVariableNames: 'surface'\n    classVariableNames: ''\n    package: 'Athens-Hello'\n```\n\nDuring the initialization phase, we'll create our Athens surface:\n```smalltalk\nAthensHello >> initialize\n    super initialize.\n    self extent: self defaultExtent.\n    surface := AthensCairoSurface extent: self extent.\n```\nwhere defaultExtent is simply defined as\n```smalltalk\nAthensHello >> defaultExtent\n    ^ 400@400\n```\nThe drawOn: method, mandatory in Morph subclasses, will ask Athens to render\nits drawing, and it'll then display it in a Morphic canvas as a Form (a bitmap \npictures)\n\n```\nAthensHello >> drawOn: aCanvas\n\n    self renderAthens.\n    surface displayOnMorphicCanvas: aCanvas at: bounds origin.\n```\n\nOur actual Athens code is located into renderAthens method:, and the result is\nstored in the surface instance variable.\n```smalltalk\nAthensHello >> renderAthens\n|font|\nfont := LogicalFont familyName: 'Arial' pointSize: 10.\n\n    surface drawDuring: [:canvas | \n        \"canvas pathTransform loadIdentity.\"\n        surface clear. \n        canvas setPaint: ((LinearGradientPaint from: 0@0  to: self extent) colorRamp: {  0 -> Color white. 1 -> Color black }).\n        canvas drawShape: (0@0 extent: self extent). \n        canvas setFont: font. \n        canvas setPaint: Color pink.\n        canvas pathTransform translateX: 20 Y: 20 + (font getPreciseAscent); scaleBy: 2; rotateByDegrees: 25.\n        canvas drawString: 'Hello Athens in Pharo/Morphic'\n        \n    ].\n```\nTo test your code, let's add an helper method. This will add a button on the left\nof the method name. When you click on it, it'll execute the content of the \nscript instruction.\n```smalltalk\nAthensHello >> open\n    <script: 'self new openInWindow'>\n```\nOn last things. You can already create the window, and see a nice gradient, with \na greeting text. However, you'll notice, if you resize your window, that the \nAthens content is not resized. To fix this, we'll need one last method.\n```smalltalk\nAthensHello >> extent: aPoint\n    | newExtent |\n    newExtent := aPoint rounded.\n    (bounds extent closeTo: newExtent)\n        ifTrue: [ ^ self ].\n    self changed.\n    bounds := bounds topLeft extent: newExtent.\n    surface := AthensCairoSurface extent: newExtent.\n    self layoutChanged.\n    self changed\n```\n\nCongratulation, you have now created your first morphic windows where content\nis rendered using Athens."
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2022-11-05T15:20:34.012517-04:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2022-11-05T15:20:44.126937-04:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "Morphic introduction"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "465444d2-1fa9-0d00-92ae-32ba029af186"
	}
}