{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-20T09:53:17.002-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-20T09:53:21.228-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "KDEbGe/eDQCbVU/JAz8ngg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The announcement framwork is an event notification framework. Compared to \"traditional\" Smalltalk event systems in this new framework, an event is a real object rather than a symbol. Announcement is the superclass for events that someone might want to announce, such as a button click or an attribute change. Typically you create subclasses for your own events you want to announce."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-20T09:53:01.715-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-20T09:53:17.004-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "UO4xGO/eDQCa/gd1Az8ngg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Events are defined as subclasses of {{gtClass:name=BlEvent|expanded}}\r\n\r\n "
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-20T09:52:26.64-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-20T09:53:13.026-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "gL4aFu/eDQCayx5vAz8ngg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "An event someone might want to announce, such as a button click or an attribute  change, is defined as a subclass of the abstract superclass Announcement. The  subclass can have instance variables for additional information to pass along,  such as a timestamp, or mouse coordinates at the time of the event, or the old  value of the parameter that has changed. To signal the actual occurrence of an\r\n event, the \"announcer\" creates and configures an instance of an appropriate  announcement, then broadcasts that instance. Objects subscribed to receive such  broadcasts from the announcer receive a broadcast notification together with  the instance. They can talk to the instance to find out any additional  information about the event that has occurred.!\r\n"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-20T09:53:46.336-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-20T09:53:47.434-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "AM/aGu/eDQCbbzPqAz8ngg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "# Simple case for BlElement.\r\n\r\n1. use method: {{gtMethod:name=BlElement>>when:do:}}\r\n2. anEventClass can be a subclass of {{gtClass:name=BlUIEvent}}\r\n\r\nThis will use BlEventHandler, and will associate a single block action to an Event.\r\n\r\n### Complex case - reusing event handling logic with BlEventListener\r\n\r\n1. Subclass `BlEventListener` (which is a subclass of {{gtClass:name=BlBasicEventHandler}} and override all method that match specific event you want to catch, for example `BlEventListener>>clickEvent:`\r\n2. Add your listener to your BlElement with method: `BlElement>>addEventHandler:`\r\n\r\nThis allows complete flexibility. You can define custom behavior and interact with\r\ndomain model object in a much cleaner way than when using **when:do:** messages.\r\n\r\n### Using event Handler\r\n\r\nUI element model can use Announcer (observer) pattern to tell when their state\r\nchange:\r\n- `card announcer when: CardFlipped send: #onFlipped to: self.`\r\n- `card announcer when: CardDisappeared send: #onDisappear to: self.`\r\n\r\nTo add event to an element, you first need to subclass 'BlEventListener' and\r\noverride the event you want to manage. You then add your event handler to your\r\nbloc element with method 'addEventHandler'. Event are bloc announcement method\r\nand classes.\r\n\r\n- event handling (`BlEvent` and children)\r\n- handling mouse and keyboard event (shortcut, keybinding, etc...)\r\n=> subclass `BlEventListener`, overwrite method which handle event, and add\r\ninstance of the class to your BlElement with method addEventHandler:\r\n\r\nKeyboard shortcut: BlShortcut\r\n\r\n- Drag&Drop\r\nExplore BlBaseDragEvent and subclasses.\r\n\r\nTake a look at `BlEventHandler|` comments:\r\n\r\nBlEventHandler: I am a scriptable event handler that allows users to assign a valuable action to the event of chosen type.\r\n\r\n```smalltalk\r\nBlEventHandler\r\n\ton: BlClickEvent\r\n\tdo: [ :anEvent | self inform: 'Click!' ]\r\n```\r\n"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-20T09:52:23.192-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-20T09:52:26.645-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "2B3mFe/eDQCaxIvZAz8ngg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "### Managing events\r\n\r\nYou have 3 players:\r\n\r\n- The element that will receive the events.\r\n- Events, or announcement in Pharo, subclasses of BlEvent.\r\n- Event handler. Either BlEventHandler, or by subclassing BlEventListener."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-20T09:49:20.2-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-20T09:52:35.177-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "QOX9Cu/eDQCZiqqNAz8ngg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "##Event handling\r\n\r\n```smalltalk\r\nBlElement new \r\n  background: Color white; \r\n  border: (BlBorder paint: Color black width: 2); \r\n  size: 300 @ 200;\r\n  addEventHandlerOn: BlMouseEnterEvent do: [ :anEvent | anEvent consumed: true. anEvent currentTarget background: Color veryVeryLightGray];\r\n  addEventHandlerOn: BlMouseLeaveEvent do: [ :anEvent | anEvent consumed: true. anEvent currentTarget background: Color white ]; \r\n  openInNewSpace \r\n```\r\n\r\n`addEventHandlerOn:do:` returns the new handler so that we can store to remove it in case. Add a #yourself send after to return a BlElement.\r\n\r\n`when:do:` is now deprecated and rewritten as `addEventHandlerOn:do:`\r\nSD: we should update the following\r\n\r\nInstead of using addEventHandlerOn:do: you can also see users of `addEventHandler:`.\r\n\r\n```\r\ndeco addEventHandler: (BlEventHandler \r\n\t\t\t\t\t\ton: BlMouseLeaveEvent\r\n\t \t\t\t\t\tdo: [ :event | event currentTarget border: BlBorder empty ]).\r\n```\r\n"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-09T15:42:07.190222-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-09T15:42:11.382682-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "N/u4a3GpDQCYmqpLAprxhg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "##introductive example"
			},
			{
				"__type" : "exampleSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-09T15:42:23.685322-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-09T15:42:23.685322-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "E39FbnGpDQCYm14kAprxhg=="
				},
				"exampleSelector" : "eventExample",
				"previewHeight" : 200,
				"previewShowSelector" : "gtViewsFor:",
				"exampleBehaviorName" : "RdvNoteBlock",
				"codeExpanded" : true,
				"previewExpanded" : false,
				"noCode" : false
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-09T15:42:47.621075-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-09T15:42:49.036079-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "kcyJb3GpDQCYnKGYAprxhg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## Other Example"
			},
			{
				"__type" : "exampleSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-09T15:43:11.420435-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-09T15:43:11.420435-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "X+AdcXGpDQCYnTScAprxhg=="
				},
				"exampleSelector" : "eventExampleMouseMove",
				"previewHeight" : 200,
				"previewShowSelector" : "gtViewsFor:",
				"exampleBehaviorName" : "RdvNoteBlock",
				"codeExpanded" : true,
				"previewExpanded" : false,
				"noCode" : false
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-09T15:43:51.698158-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-09T15:43:52.843775-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "Ap2pcnGpDQCYngfNAprxhg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## events definitions."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-09T15:44:15.155422-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-09T15:44:15.155422-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "90rIdHGpDQCYnzsrAprxhg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The announcement framwork is an event notification framework. Compared to \"traditional\" Smalltalk event systems in this new framework, an event is a real object rather than a symbol. Announcement is the superclass for events that someone might want to announce, such as a button click or an attribute change. Typically you create subclasses for your own events you want to announce.\n\r\nEvents are defined as subclasses of {{gtClass:name=BlEvent|expanded}}"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-09T15:44:30.463488-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-09T15:44:30.463488-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "ofCydXGpDQCYoKdSAprxhg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : " An event someone might want to announce, such as a button click or an attribute change, is defined as a subclass of the abstract superclass Announcement. The subclass can have instance variables for additional information to pass along, such as a timestamp, or mouse coordinates at the time of the event, or the old value of the parameter that has changed. To signal the actual occurrence of an event, the \"announcer\" creates and configures an instance of an appropriate announcement, then broadcasts that instance. Objects subscribed to receive such broadcasts from the announcer receive a broadcast notification together with the instance. They can talk to the instance to find out any additional information about the event that has occurred.!"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-09T15:44:50.676367-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-09T15:44:50.676367-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "QiLddnGpDQCYoTJKAprxhg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "##managing events\r\n###simple case for BlElement\r\n1. use method: {{gtMethod:name=BlElement>>when:do:}}\n2. anEventClass can be a subclass of {{gtClass:name=BlUIEvent}}\n\r\n\r\n###complex case - reusing event handling logic with BlEventListener\r\n1. Subclass {{gtClass:name=BlEventListener}} (which is a subclass of {{gtClass:name=BlBasicEventHandler}} and override all method that match specific event you want to catch, for example {{gtMethod:name=BlEventListener>>clickEvent:}}\r\n2. Add your listener to your BlElement with method: {{gtMethod:name=BlElement>>addEventHandler:}} \n\r\n###using event Handler\nTake a look at {{gtClass:name=BlEventHandler|full}} comments:\r\n\nBlEventHandler: I am a scriptable event handler that allows users to assign a valuable action to the event of chosen type.\n```\nBlEventHandler\n\ton: BlClickEvent\n\tdo: [ :anEvent | self inform: 'Click!' ]\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-09T15:45:13.645693-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-09T15:45:13.645693-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "EhdGeHGpDQCYoqarAprxhg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "##underlying mecanism\r\nBlEventDispatcher -> announcer qui dispatch event\nBlSpaceEventListener >> handleEvent\n\nBlMouseEnterEvent\r\n\r\n\r\ndouble dispatch: Classe de base: BlEvent\nBlMouseEnterEvent >> sendTo: anObject\n\tanObject mouseEnterEvent: self\n    \nBlEventListener >> mouseEnterEvent: anEvent qui peut être spécialisé par une sous-classe.\n\n\n##On pharo side, using OSWindow\nOSWindowMorphicEventHandler => gère les évènements au niveau OS Windows, qui fait le lien avec SDL2.\nBlMorphicEventHandler => convertit les évènements Morphic en évenements Bloc\nOSEvent -> Announcement coté Pharo\nBlEvent -> announcement coté Bloc/GToolkit\n\n"
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2022-11-09T15:41:40.815997-05:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2022-11-09T15:41:48.438911-05:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "Bloc events"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "635bb76b-71a9-0d00-9899-259e029af186"
	}
}