{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-05T15:23:13.649936-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-05T15:23:13.649936-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "fHOx2x+pDQCSvYaiAprxhg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## Layout\n\nHi. In Spec1, the UI layout was described in the class side defaultSpec method. In the TODO tutorial, the layout is given is the initializePresenters instance side method. What is the prefered way in Spec2 ? Stick with class side method, or add it in initializePresenters ?\nEsteban Lorenzano\n — \n10/27/2020\nin spec2 layout will be created in instance side and class-side accessors will remain for those who prefer it.\nthis is to reflect the dynamic nature of layouts in spec2, and the fact that you can compose them using directly presenter instances, not forcing you to declare them by name before.\nnow... it is possible that there are cases where you want the layout \"template\" instead the layout instantiated... so you still can do it.\n\n### BoxLayout (SpBoxLayout and SpBoxConstraints)\nIt show presenters in an ordered box. Box can be horizontal or vertical and \npresenters will be ordered top to down or left to right following direction decided. \nThe basic message to add presenters is: #add:expand:fill:padding:\nexpand \t\t- true if the new child is to be given extra space allocated to box . \n\t\t\t  The extra space will be divided evenly between all children that use this option\nfill \t\t- true if space given to child by the expand option is actually allocated to child , \n\t\t\t  rather than just padding it. This parameter has no effect if expand is set to false. \npadding \t- extra space in pixels to put between this child and its neighbors, over and above \n\t\t\t  the global amount specified by “spacing” property. If child is a widget at one of \n\t\t\t  the reference ends of box , then padding pixels are also put between child and the\n\t\t\t  reference edge of box\"\n\n```smalltalk\nSpBoxLayout newVertical  spacing: 15;\n\tadd: #button1 expand: false fill: true padding: 5;\n\tadd: #button2 withConstraints: [ :constraints | constraints width: 30; padding: 5];\n\taddLast: #button3 expand: false fill: true padding: 5;\n\tyourself\n```\n\nElement in a vertical box will use all available horizontal space, and fill \nvertical space according to the rules. This will be inverted with horizontal box.\n\nBox layout can be composed, we can add a box to an existing one.\n\t  \n### GridLayout (SpGridLayout, SpGridConstraints and SpGridAxisConstraints)\nI can arrange submorphs in a grid according to its properties (position and \nspan, see GridLayoutProperties), and according certain layout properties: \nI can place my elements in a grid, following some constraints: \n - a position is mandatory (columnNumber@rowNumber)\n - a span can be added if desired (columnExtension@rowExtention)\n\n - columnHomogeneous -> weather a columns will have same size.\n - rowHomogeneous -> weather a row will have same size. \n - padding -> the padding to start drawing cells ??? => to be confirmed\n - colSpacing -> the column space between cells\n - rowSpacing -> the row space between cells\n\n```smalltalk\nSpGridLayout new\n\t\tadd: 'Name:' at: 1@1;\n\t\tadd: #nameText \tat: 2@1;\n\t\tadd: 'Password:' at: 1@2;\n\t\tadd: #passwordText at: 2@2;  \n\t\tadd: #acceptButton at: 1@3;\n\t\tadd: #cancelButton at: 2@3 span: 2@3;\n\t\tadd: 'test label' at: 1@4;\n\t\tyourself\n```\t\t\nAs of this writing (january 13, 2020), we cannot add a box layout to a grid.\n\n### Paned layout (SpPanedLayout and SpPanedConstraints)\nA paned layout is like a Box Layout (it places childen in vertical or horizontal \nfashion), but it will add a splitter in between, that user can drag to resize the panel.\nIn exchange, a paned layout can have just two children. Position Indicates \noriginal position of splitter. It can be nil (then it defaults to 50%) or It can \nbe a percentage (e.g. 30 percent)\n\n```smalltalk\nSpPanedLayout newHorizontal position: 80 percent;\n                        add: '#acceptButton';\n                        add: #cancelButton; yourself.\n```"
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2022-11-05T15:23:12.074148-04:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2022-11-05T15:23:21.933421-04:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "Spec Layout"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "a028b0db-1fa9-0d00-92bc-20b9029af186"
	}
}