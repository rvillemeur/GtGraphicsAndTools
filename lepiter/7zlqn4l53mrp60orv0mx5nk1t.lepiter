{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-05T15:19:09.448631-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-05T15:19:09.448631-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "pdwXzR+pDQCSqcaUAprxhg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "# drawing with canvas\n\nOne can manage the Form pixel by pixel. However, you would quickly start to implement\nprimitive to help drawing line, circles, elipses, border, and fill the geometric \nmesh you would have just created.\n\nDon't look any further, the problem has already been solved, with the Canvas object.\nIn Pharo, it's more specifically a FormCanvas object, a Canvas that interact well \nwith a Form\n\nHere is the definition of Canvas from Pharo documentation:\n\"A canvas is a two-dimensional medium on which morphs are drawn in a device-independent manner. Canvases keep track of the origin and clipping rectangle, as well as the underlying drawing medium (such as a window, pixmap, or postscript script).\"\n\n## creating canvas\n\n```smalltalk\ncanvas := FormCanvas extent: 10@10.\n\ncanvas fillColor: Color white.\ncanvas line: 0@0 to: 10@10 width: 1 color: Color black.\ncanvas line: 0@9 to: 9@0 width: 1 color: Color red.\ncanvas form magnifyBy: 10\n```\n\n## canvas with specific depth\n\n```smalltalk\ncanvas := FormCanvas extent: 10@10 depth: 4.\n\ncanvas fillColor: Color white.\ncanvas line: 0@0 to: 10@10 width: 1 color: Color black.\ncanvas line: 0@9 to: 9@0 width: 1 color: (Color r: 0.5 g: 0.5 b: 0.5).\ncanvas form magnifyBy: 10\n```\n\npict := ColorForm extent: 10@10 depth: 2.\n\n\"create a color map of 2^depth color\"\nmap := {  Color lightBlue . \n\t\t\tColor blue .\n\t\t\tColor lightGray .\n\t\t\tColor red.\n }.\npict colors: map.\n\n\ncanvas := FormCanvas on: pict.\n\n\"canvas fillColor: (Color fromHexString:'100000').\"\ncanvas line: 0@0 to: 10@10 width: 1 color: Color lightCyan .\ncanvas line: 0@9 to: 9@0 width: 1 color: Color blue.\ncanvas line: 0@5 to: 10@5 width: 1 color: Color white.\ncanvas line: 5@0 to: 5@10 width: 1 color: Color yellow.\ncanvas line: 0@9 to: 9@0 width: 1 color: Color red.\ncanvas form \n\n\nbitPatternForDepth: depth \n\t\"Return a Bitmap, possibly containing a stipple pattern, that best represents this color at the given depth. BitBlt calls this method to convert colors into Bitmaps. The resulting Bitmap may be multiple words to represent a stipple pattern of several lines.  \"\n\t\"See also:\tpixelValueAtDepth:\t-- value for single pixel\n\t\t\t\tpixelWordAtDepth:\t-- a 32-bit word filled with the pixel value\"\n\t\"Details: The pattern for the most recently requested depth is cached.\"\n\t\"Note for depths > 2, there are stippled and non-stippled versions (generated with #balancedPatternForDepth: and #bitPatternForDepth:, respectively). The stippled versions don't work with the window bit caching of StandardSystemView, so we make sure that for these depths, only unstippled patterns are returned\"\n    \n    "
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2022-11-05T15:19:07.11843-04:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2022-11-05T15:19:16.974483-04:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "drawing with Bitmap Canvas"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "416e16cd-1fa9-0d00-92a8-abdb029af186"
	}
}