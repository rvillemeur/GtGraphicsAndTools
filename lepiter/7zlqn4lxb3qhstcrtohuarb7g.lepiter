{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-05T15:24:07.441707-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-05T15:24:07.441707-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "aF7j3h+pDQCSw4cuAprxhg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Styling spec2.\n\nSpec2 allows you to style your widget, either morphic or Gtk.\nHere, we'll focus on morphic, which is the only platform  I work on currently.\n\nSpMorphStyle class >> fromStylesheet: aStyle adapter: anAdapter\n\t\"I collect all styles that apply to an adapter.\n\t I traverse all styles in a very precise order: from more generic to more specific, this way \n\t the order of the collected elements will be in reverse order of execution.\"\n\n\nfind style name for morphic element:\n\nSpAbstractMorphicAdapter >> styleName\n^ ((self className withoutPrefix: 'SpMorphic') allButLast: 7) uncapitalized\n\n=> SpMorphicLabelAdapter -> Label\n\n\nWe first collect the style for the presenter, then we collect style for is \nspecific sub-element. 'application' is the default root level, there is no \n'application' adapter.\n\nA defined stylesheet has to have always a root element, and this root element \nneeds to be called '.application'. \n\nSo each style follow a cascading style, starting from .application\nlike\n.application.label.header\n.application.link\n.application.checkBox\n\n\nA style can be declared through the STON notation.\nEach style can follow in on of these category with properties taken from\nobject messages. \n - Container -> SpStyleContainer\n - Draw -> SpStyleDraw\n - Font -> SpStyleFont\n - Geometry -> SpStyleGeometry.\n \n\nExample:\n    Geometry { #hResizing: true }\n    Draw { #color:  Color{ #red: 1, #green: 0, #blue: 0, #alpha: 1}}\n    Draw { #color: #blue}\n    Font { #name: \"Lucida Grande\", #size: 10, #bold: true }\n    Container { #borderColor: Color { #rgb: 0, #alpha: 0 }, #borderWidth: 2, #padding: 5 },\n    \nyou can define your style globaly, and to your specific presenter, with the 'addStyle:'\nmessage: addStyle: 'section'. This message is specific to the SpAbstractMorphicAdapter backend.\n\nstyleSheet\n\t^ SpStyleSTONReader fromString: '\n.application [\n\tFont { #name: \"Source Sans Pro\", #size: 10 },\n\tGeometry { #height: 25 },\n\t.label [\n\t\tGeometry { #hResizing: true },\n\t\t.headerError [Draw { #color:  Color{ #red: 1, #green: 0, #blue: 0, #alpha: 1}}  ],\n\t\t.headerSuccess [Draw { #color: Color{ #red: 0, #green: 1, #blue: 0, #alpha: 1}}  ],\n\t\t.header [ \n\t\t\tDraw { #color: Color{ #rgb: 622413393 }},\n\t\t\tFont { #name: \"Lucida Grande\", #size: 10, #bold: true } ],\n\t\t.shortcut [ \n\t\t\tDraw { #color: Color{ #rgb: 622413393 } },\n\t\t\tFont { #name: \"Lucida Grande\", #size: 10 }\n\t\t],\n\t\t.fixed [ \n\t\t\tGeometry { #hResizing: false, #width: 100 }\n\t\t],\n\t\t.dim [\n\t\t\tDraw { #color : Color{ #rgb: 708480675 } }\n\t\t]\n\t],\n\t.link [  \n\t\tGeometry { #hResizing: true }\t\t\n\t],\n\t.button [  \n\t\tGeometry { #width: 100 },\n\t\t.small [\n\t\t   Geometry { #width: 26 }\n\t\t]\n\t],\n\t.checkBox [  \n\t\tGeometry { #hResizing: true }\n\t],\n\t.radioButton [ \n\t\tGeometry { #hResizing: true }\n\t],\n\t.dropList [ \n\t\tGeometry { #width: 150, #hResizing: true }\n\t],\n\t.list [ \n\t\tGeometry { #width: 150, #hResizing: true, #vResizing: true }\n\t],\n\t.slider [\n\t\tGeometry { #width: 150, #hResizing: true }\n\t],\n\t.actionBar [  \n\t\tContainer { \n\t\t\t#borderColor: Color { #rgb: 0, #alpha: 0 }, \n\t\t\t#borderWidth: 2, \n\t\t\t#padding: 5 },\n\t\tGeometry { #width: 150, #height: 29, #hResizing: true, #vResizing: false }\n\t],\n\t.menuBar [\n\t\tGeometry { #width: 150, #hResizing: true }\n\t],\n\t.actionButton [  \n\t\tGeometry { #width: 60, #hResizing: false },\n\t\t.showIcon [ Geometry { #width: 25 } ]\n\t],\n\t.toolBar [ \n\t\tGeometry { #hResizing: true },\n\t\t.icons [ \n\t\t\tGeometry { #height: 30 }\n\t\t],\n\t\t.iconsAndLabel [  \n\t\t\tGeometry { #height: 45 }\n\t\t]\n\t],\n\t.text [ \n\t\tGeometry { #height: 0 }\n\t],\n\t.code [\n\t\tFont { #name : \"Source Code Pro\", #size : 10 }\n\t],\n\t.codePopover [ \n\t\tDraw { #color : #transparent },\n\t\t.button [\n\t\t\tGeometry { #width : 25 }\n\t\t]\n\t],\n\t.scrollbarPopoverLarge [ \n\t\tGeometry { #height: 350 } \n\t]\n]\n'\n\t\t\n\nstyleSheet\n\t^ SpStyle defaultStyleSheet, (SpStyleSTONReader\n\t\tfromString:\n\t\t\t'\n.application [\n\tDraw { #backgroundColor: #lightRed},\n\t.section [ \n\t\t\tDraw { #color: #green, #backgroundColor: #lightYellow},\n\t\t\tFont {  #name: \"Verdana\", #size: 12, #italic: true, #bold: true}],\n\t.disabled [ Draw { #backgroundColor: #lightGreen} ],\n\t.textInputField [ Draw { #backgroundColor: #blue} ],\n\t.label [\n\t\tFont {  #name: \"Verdana\", #size: 10, #italic: false, #bold: true},\n\t\tDraw { #color: #red, #backgroundColor: #lightBlue}\n\t]\n]\n')\n"
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2022-11-05T15:24:05.673116-04:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2022-11-05T15:24:13.790803-04:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "Spec Styles"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "7c03e2de-1fa9-0d00-92c2-c8f5029af186"
	}
}