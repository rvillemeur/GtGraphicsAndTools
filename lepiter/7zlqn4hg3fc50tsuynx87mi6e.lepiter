{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-05T15:21:22.121508-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-05T15:21:22.121508-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "NcMM1R+pDQCSsyJ6Aprxhg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## Morphic Event Loop\n\nWorld is ultimately a Form that is displayed on your desktop using SDL2.\nThere are several steps to display your morph and your widget on the screen\n\ndraw with bitmap canvas and Morphic.\n\nUsing drawOn: a Canvas method, \naCanvas is of type a FormCanvas on: Form(1536x934x32)\nSo you're drawing on a form that is the Whole smalltalk Word\nYou can check it by inspecting the Form the canvas is drawing on.\n\n*Smalltalk currentWorld extent* = 1536x934x32\n\nthis is because of the recursive aspect of Morphic.\nIn the end, everything is displayed on a single Form that represent the world.\n\nIn MorphicUIManager: **MorphicRenderLoop new doOneCycleWhile: [ true ]**\nwhich will calls WorldMorph class >> doOneCycle\nWorldMorph displayWorld -> \tworldState displayWorld: self\n    \nWhich will recursively draw all submorph of the world.\n    \n    \nWhen you invoke the method \"openInWorld\", you add your morph to the global World morph\nas this code indicate: \n```smalltalk\ndoOpenInWorld: aWorld\n\n\taWorld addMorph: self\n```\nBecause it simply do addMorph, your morph will appear in the top left corner, unless\nyou specify its position.\n\nIf you open your morph in a window, it'll be embeded in a SystemWindow. When you open it,\nit will use the strategy \"cascadeFor:initialExtent:world:\" which say: \n```smalltalk\nposition := aWorld currentWindow isMorph \n\t\tifFalse: [ aWorld center - (initialExtent / 2)]\n\t\tifTrue: [ aWorld currentWindow position + 20].\n        \n```\n\n## world definition\n\nMorph >> BorderedMorph >> PasteUpMorph >> WorldMorph >> OSWindowWorldMorph\n\n### shutdown\nOSWindowDriver class shutdown: \n```smalltalk\n\t\"clean OSWindow worlds\"\n\tWorldMorph extraWorldList copy \n\t\tselect: [ :each | each isKindOf: OSWindowWorldMorph ]\n\t\tthenDo: [ :each | WorldMorph removeExtraWorld: each ].\n\t\"Clean also active world\"\n\t(ActiveWorld isKindOf: OSWindowWorldMorph)\n\t\tifTrue: [ ActiveWorld := nil ]\n```\n\n\n### startup\nPharoBootstrapInitialization >> initializeCommandLineHandlerAndErrorHandling\n```smalltalk\n\tUIManager default: NonInteractiveUIManager new.\t\n```\n\n## OSWindow\nOSWindow and its sub-package define the API used by Pharo for creating and \ncontrolling an operating system window. It defines *renderer* used to display\nthe morphic world, the *Events* used to response to user interaction (mouse click\nwindow move, etc...)\n\nAbstractWorldRenderer >> OSWorldRenderer\n\nOSWorldRenderer is called in OSWindowWorldMorph >> open \n\nOSWindow driver by default is OSSDL2Driver, which is defined in Pharo Settings\n*OSWindowDriver >> OSSDL2Driver createWindowWithAttributes: attributes osWindow: osWindow * \n\n## SDL2\n\nSDL is the low level library that is used to interact with the underlying operating system\nContrary to old way of doing in previous Pharo VM, The whole interface is now mapped\nusing UFFI (Universal Foreign Function Interface), and so the full code is available\nin the Pharo. You can look at the package **OSWindow-SDL2** and its sub-packages.\n\nOSWindowRenderer >> OSWindowFormRenderer >> OSSDL2FormRenderer\n\nThe package contains both the code to interact with SDL2 library, as well as\nconcrete implementation of class used to render the Morphic World on a concrete\ndesktop window.\n\nPlatform abstration is defined in **OSPlatform** and its subclasses\n\n\n## Event Handling."
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2022-11-05T15:21:20.612857-04:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2022-11-05T15:21:26.03763-04:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "Morph events"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "865c0bd5-1fa9-0d00-92b2-8960029af186"
	}
}