{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-20T09:35:55.346-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-20T09:35:55.346-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "aMgE2+7eDQCULtFYAz8ngg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "A layout defines the way children are positioned inside their parent element. This position is deduced from the layout strategy used. If you don't specify which layout your parent element will use, it'll default to `BlBasicLayout` strategy.\r\n\r\nYou can add an element with `addChild:` and it will be placed according to the the specified layout .\r\n\r\nHere is the list of layouts available by default\r\n\r\n* `BlBasicLayout`\r\n* `BlLinearLayout`\r\n* `BlFlowLayout`\r\n* `BlGridLayout`\r\n* `BlFrameLayout`\r\n* `BlZoomLayout`\r\n* `BlProportionalLayout`\r\n\r\nThe list of all layouts available: `BlLayout allSubclasses`\r\n\r\nEach layout has a dedicated constraint object, an instance of `BlLayoutCommonConstraints` which contains layout universal constraints. Constraints are associated with the layout defined by the parent element. Each type of layout can further define its own specific constraints by creating\r\na subclass of `BlLayoutConstraints`.\r\n\r\nFor example\r\n- when a parent element uses the layout type `BlLinearLayout`\r\n- its children constraints are detailed by `BlLinearLayoutConstraints`."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-20T09:35:59.843-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-20T09:35:59.843-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "uGpJ2+7eDQCUNSrPAz8ngg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "#### Defining constraints. \r\n\r\nYou can define constraints at the parent element level when specifying layout type. For example`layout: BlLinearLayout horizontal alignCenter;`\r\n\r\nor you can refine its constraints in its children `constraintsDo: [ :c | c linear horizontal alignCenter. ]`\r\n\r\nThe first option lets you define position constraints that apply to all children, and is a good fit for *flow layout* or *linear layout*. For layouts that have a limited number of children, such as *frame layout*, it's better to let the children decide their position constraints. You'll find some example below."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-20T09:36:07.916-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-20T09:36:07.916-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "+JXE2+7eDQCUQcpBAz8ngg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "### Ignoring or interacting with parent layout\r\n\r\nYou can ignore the layout defined by the parent using `ignoreLayout`. When you\r\nuse this constraint, your element will be removed from parent layout rules,\r\nand follow *BlBasicLayout* instead, meaning you can place your element at\r\narbitrary position within your parent element.\r\n\r\n```smalltalk\r\n\tconstraintsDo: [ :c | c ignoreByLayout ].\r\n```\r\n\r\nYou can also interact with parent layout constraint using `flow`, `frame`,\r\n`grid`, `linear`, or `relative` messages. \r\n\r\nIn the example below, the second element will use all the space of its parent, and manage the position of its children\r\nusing `BlFrameLayout` strategy. The first element, which could act as a\r\ncontainer for other sub-elements, apply `BlLinearLayout` strategy, but positions\r\nitself on its parent using the *frame* constraint.\r\n\r\n```smalltalk\r\nfirst := BlElement new\r\n\tlayout: BlLinearLayout horizontal alignCenter;\r\n\tbackground:  Color red;\r\n\tconstraintsDo: [ :c |\r\n\t\tc vertical fitContent.\r\n\t\tc horizontal fitContent.\r\n\t\tc frame horizontal alignCenter.\r\n\t\tc frame vertical alignCenter ].\r\nsecond := BlElement new\r\n\tbackground:  Color blue;\r\n\tlayout: BlFrameLayout new;\r\n\tconstraintsDo: [ :c |\r\n\t\tc vertical matchParent.\r\n\t\tc horizontal matchParent ];\r\n\taddChild: first.\r\nsecond openInSpace\r\n```\r\nSD: I do not see it. \r\n"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-20T09:35:03.51-04:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-09-20T09:36:13.686-04:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "2Nvt1+7eDQCTn3xsAz8ngg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "### Example\r\n\r\nThis define sa new element, where children will be positioned using linear layout strategy, and whose side will match space available in parent element. (see Figure *@matchplinear@*).\r\n\r\n```smalltalk\r\ne := BlElement new.\r\ne\r\n\tlayout: BlLinearLayout horizontal alignCenter;\r\n\tbackground: Color green;\r\n\tconstraintsDo: [ :c |\r\n\t\tc horizontal matchParent.\r\n\t\tc vertical matchParent ].\r\ne2 := BlElement new.\r\ne2 background: Color red.\r\ne addChild: e2.\r\ne3 := BlElement new.\r\ne3 background: Color white.\r\ne addChild: e3.\r\ne openInSpace\r\n```"
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2024-09-20T09:35:16.49-04:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2024-09-20T09:35:16.49-04:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "BlElement  layout strategy and constraints"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "d089edd7-eede-0d00-939e-9987033f2782"
	}
}